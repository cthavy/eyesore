{"ast":null,"code":"var _jsxFileName = \"/Users/casey/workspace/eyesore/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // @todo refactor the whooooooole thaaaaang\n\nfunction Square(props) {\n  console.log('new color', props.baseColor);\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    style: props.style,\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    const MAX_ROUNDS = 10;\n    const SIGHT_TIER = ['Color-blind', 'Below Average', 'Average', 'Eagle', 'Robot'];\n    const ROUND_TIMER = 10000;\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n      currentRound: 0,\n      answerSquare: 0,\n      baseColor: 'hsl(47, 95%, 70%)',\n      offColor: 'hsl(52, 95%, 70%)'\n    };\n  }\n\n  nextRound() {\n    // randomize HSL color\n    // add difficulty\n    let H = Math.floor(Math.random() * 360);\n    let S = Math.floor(Math.random() * 30 + 70);\n    this.setState({\n      baseColor: `hsl(${H}, ${S}, 50%)`,\n      offColor: `hsl(${H + 5}, ${S}, 50%)`\n    }, console.log(this.state));\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (this.checkAnswer(squares) || squares[i]) return;\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext\n    }, this.nextRound());\n  } // render with random color and offset one\n\n\n  renderSquare(i) {\n    const divStyle = {\n      backgroundColor: i === this.state.answerSquare ? this.state.offColor : this.state.baseColor,\n      borderColor: i === this.state.answerSquare ? this.state.offColor : this.state.baseColor\n    };\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.state.squares[i],\n      onClick: () => this.handleClick(i),\n      style: divStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    const correct = this.checkAnswer(this.state.squares);\n    let status = correct ? 'Correct' : ' '; // @todo cant hard code squares, needs to expand per round\n    // @question how do we make the css flexible enough as squares grow\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n  /** @todo\n   * Check if clicked on was correct\n   * */\n\n\n  checkAnswer(squares) {}\n\n} // @todo refactor naming\n\n\nclass Game extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 3\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/casey/workspace/eyesore/src/index.js"],"names":["React","ReactDOM","Square","props","console","log","baseColor","style","onClick","value","Board","Component","constructor","MAX_ROUNDS","SIGHT_TIER","ROUND_TIMER","state","squares","Array","fill","xIsNext","currentRound","answerSquare","offColor","nextRound","H","Math","floor","random","S","setState","handleClick","i","slice","checkAnswer","renderSquare","divStyle","backgroundColor","borderColor","render","correct","status","Game","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// @todo refactor the whooooooole thaaaaang\n\n\nfunction Square(props) {\n  console.log('new color', props.baseColor);\n  return (\n    <button className=\"square\" style={props.style} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const MAX_ROUNDS = 10;\n    const SIGHT_TIER = ['Color-blind', 'Below Average', 'Average', 'Eagle', 'Robot']\n    const ROUND_TIMER = 10000;\n\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n\n      currentRound: 0,\n      answerSquare: 0,\n      baseColor: 'hsl(47, 95%, 70%)',\n      offColor: 'hsl(52, 95%, 70%)'\n    }\n  }\n\n  nextRound() {\n    // randomize HSL color\n    // add difficulty\n    let H = Math.floor(Math.random()*360);\n    let S = Math.floor((Math.random()*30)+70);\n    this.setState({\n      baseColor: `hsl(${H}, ${S}, 50%)`,\n      offColor: `hsl(${H+5}, ${S}, 50%)`\n    }, console.log(this.state));\n\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (this.checkAnswer(squares) || squares[i]) return;\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext\n    }, this.nextRound());\n  }\n\n  // render with random color and offset one\n  renderSquare(i) {\n    const divStyle = {\n      backgroundColor: i === this.state.answerSquare ? this.state.offColor : this.state.baseColor,\n      borderColor: i === this.state.answerSquare ? this.state.offColor : this.state.baseColor\n    };\n\n    return (\n      <Square \n        value={this.state.squares[i]} \n        onClick={() => this.handleClick(i)}\n        style={divStyle}\n      />\n    )\n  }\n\n  render() {\n    const correct = this.checkAnswer(this.state.squares);\n    let status = correct ? 'Correct' : ' ';\n\n    // @todo cant hard code squares, needs to expand per round\n    // @question how do we make the css flexible enough as squares grow\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n\n  /** @todo\n   * Check if clicked on was correct\n   * */ \n  checkAnswer(squares) {\n    \n  }\n}\n\n// @todo refactor naming\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}